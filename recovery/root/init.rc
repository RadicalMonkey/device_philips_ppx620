import /init.${ro.hardware}.usb.rc
import /init.usb.configfs.rc

on early-init
    loglevel 7

    # Apply strict SELinux checking of PROT_EXEC on mmap/mprotect calls.
    write /sys/fs/selinux/checkreqprot 0

    # Set the security context for the init process.
    # This should occur before anything else (e.g. ueventd) is started.
    #setcon u:r:init:s0

    start ueventd

service set_permissive /sbin/permissive.sh
    oneshot
    seclabel u:r:recovery:s0

on init
    export PATH /sbin
    export LD_LIBRARY_PATH .:/sbin
    export ANDROID_ROOT /system
    export ANDROID_DATA /data
    export EXTERNAL_STORAGE /external_sd

    mount cgroup none /acct cpuacct
    mkdir /acct/uid

    mkdir /sdcard
    mkdir /external_sd
    mkdir /system
    mkdir /data
    mkdir /cache
    mkdir /sideload
    mkdir /metadata
    mount tmpfs tmpfs /tmp

    chown root shell /tmp
    chmod 0775 /tmp

    write /sys/devices/platform/ff450000.syscon/ff450000.syscon:usb2-phy@100/otg_mode host
    write /proc/sys/kernel/panic_on_oops 1
    write /proc/sys/vm/max_map_count 1000000

on fs
    mount pstore pstore /sys/fs/pstore


on boot && property:persist.sys.usb.config=*
    setprop sys.usb.config ${persist.sys.usb.config}
    # setprop ro.serialno rockchipplatform
    setprop sys.usb.ffs.ready 1
    setprop sys.usb.ffs.mtp.ready 1
    setprop sys.usb.configfs 1

on boot
    ifup lo
    hostname localhost
    domainname localdomain

    class_start default

on firmware_mounts_complete
   rm /dev/.booting

# Mount filesystems and start core system services.
on late-init
    trigger early-fs
    trigger fs
    trigger post-fs
    trigger post-fs-data

    # Remove a file to wake up anything waiting for firmware
    trigger firmware_mounts_complete

    trigger early-boot
    trigger boot
	

service ueventd /sbin/ueventd
    critical
    seclabel u:r:ueventd:s0

   
service charger /charger -r
    critical
    seclabel u:r:charger:s0

service recovery /sbin/recovery
    seclabel u:r:recovery:s0

service adbd /sbin/adbd --root_seclabel=u:r:su:s0 --device_banner=recovery
    disabled
    socket adbd stream 660 system system
    seclabel u:r:adbd:s0
    
service console /sbin/sh
    console
	disabled
    seclabel u:r:shell:s0

# Always start adbd on userdebug and eng builds
on property:ro.debuggable=1
    start adbd
    setprop service.adb.root 1
    start console

# Restart adbd so it can run as root
on property:service.adb.root=1
    restart adbd
